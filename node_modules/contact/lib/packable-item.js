class PackableItem {
  from
  type
  children = []
  content

  serialise () {
    return JSON.stringify(this)
  }

  static build (item) {
    if (item.type === 'msg') {
      return new Message(item)
    } else if (item.type === 'file') {
      return new File(item)
    } else if (item.type === 'sys') {
      return new System(item)
    }
  }
}

class Message extends PackableItem {
  type = 'msg'

  constructor (item = {}) {
    super()
    Object.assign(this, item)
    Object.seal(this)
  }

  toString () {
    return this.content.toString()
  }
}

class System extends PackableItem {
  type = 'sys'
  from = 'System'

  constructor (item = {}) {
    super()
    Object.assign(this, item)
    Object.seal(this)
  }

  toString () {
    return this.content.toString()
  }
}

class File extends PackableItem {
  type = 'file'
  event
  basename = ''
  filePath = ''

  constructor (item = {}) {
    super()
    Object.assign(this, item)
    Object.seal(this)
  }

  toString () {
    return this.filePath || this.basename
  }
}

export { PackableItem, Message, File }
