import path from 'node:path'
import fs from 'node:fs'
import { PackableItem } from './packable-item.js'

class FileSenderWebsocket {
  filePath
  websocket
  from

  constructor (sender) {
    Object.assign(this, sender)
  }

  async wsSend (packableItem) {
    return new Promise((resolve, reject) => {
      this.websocket.send(packableItem.serialise(), resolve)
    })
  }

  async send () {
    return new Promise((resolve, reject) => {
      const basename = path.basename(this.filePath)
      // this.wsSend(PackableItem.build({ type: 'file', event: 'start', basename, from: this.from }))
      this.websocket.send(JSON.stringify({ type: 'file', event: 'start', basename, from: this.from }), () => {
        const readable = fs.createReadStream(this.filePath)
        readable.on('error', err => {
          console.error(err)
          reject(err)
        })
        readable.on('data', chunk => {
          /* Send each binary chunk with an ID in the header so it can be matched by the receiver */
          this.websocket.send(chunk, { binary: true, fin: false })
        })
        readable.on('end', () => {
          this.websocket.send(Buffer.alloc(0), { binary: true, fin: true }, () => {
            this.websocket.send(JSON.stringify({ type: 'file', event: 'end' }))
            resolve()
          })
        })
      })
    })
  }
}

class FileReceiverWebsocket {
  name = ''
  content = Buffer.alloc(0)

  save () {
    fs.writeFileSync(this.name, this.content)
  }
}

export { FileSenderWebsocket, FileReceiverWebsocket }
