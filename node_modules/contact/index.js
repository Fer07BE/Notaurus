import { WebSocket } from 'ws'
import CliView from './lib/cli-view.js'
import StateMachine from 'fsm-base'
import { PackableItem } from './lib/packable-item.js'
import { FileSenderWebsocket, FileReceiverWebsocket } from './lib/sender.js'
import fs from 'node:fs'
import path from 'node:path'

class ContactClient extends StateMachine {
  currentRoom
  websocket
  cliView = new CliView() // decouple from specific view
  user = {}

  constructor (userId) {
    super()
    this._initStateMachine('offline', [
      { from: 'offline', to: 'connecting' },
      { from: 'connecting', to: 'online' },
      { from: ['connecting', 'online'], to: 'offline' }
    ])
    this.user.id = userId
  }

  _onStateChange (state, prevState) {
    this.cliView.displayMessage(`State change from ${prevState} to ${state}`, { skipPrompt: true })
    if (state === 'offline') {
      this.close()
    }
  }

  async init () {
    for await (const line of this.cliView.eventStream()) {
      console.log(`${this.user.id}: ${line}`)
      if (line === '/exit') {
        this.close()
      } else if (line.startsWith('/send')) {
        const parts = line.split(/\s/)
        if (parts.length) {
          const filePath = parts[1]
          this.sendFile(filePath)
        }
      } else {
        this.send(line)
      }
    }
  }

  async joinRoom (relayUrl, roomId) {
    return new Promise((resolve, reject) => {
      this.state = 'connecting'
      const websocket = new WebSocket(relayUrl, {
        headers: { roomId },
        maxPayload: 104857600000,
        timeout: 5000
      })
      this.websocket = websocket
      websocket.on('error', err => {
        this.cliView.displayMessage(`${err.message}`)
        reject(err)
      })
      websocket.on('open', () => {
        this.onConnect().then(resolve)
      })
      websocket.on('message', (data, isBinary) => {
        this.onData(data, isBinary)
      })
      websocket.on('close', (number, reason) => {
        this.cliView.disable()
        this.onDisconnect()
      })
    })
  }

  async onConnect () {
    this.state = 'online'
  }

  async onDisconnect () {
    this.state = 'offline'
  }

  async send (content) {
    return new Promise((resolve, reject) => {
      const packableItem = PackableItem.build({ type: 'msg', content, from: this.user.id })
      this.websocket.send(packableItem.serialise(), resolve)
    })
  }

  async onData (data, isBinary) {
      // console.log(JSON.parse(data))
      const item = PackableItem.build(JSON.parse(data))
      // console.log(item)
      this.cliView.displayMessage(`${item.from}: ${item.toString()}`)
      if (item.type === 'file') {
        fs.writeFileSync(item.basename, Buffer.from(item.content.data))
      }
  }

  async close () {
    this.websocket.close()
  }

  async sendFile (filePath) {
    return new Promise((resolve, reject) => {
      this.cliView.displayMessage(`Sending file: ${filePath}`, { skipPrompt: true })
      const content = fs.readFileSync(filePath)
      const packableItem = PackableItem.build({ type: 'file', content, from: this.user.id, filePath, content, basename: path.basename(filePath) })
      this.websocket.send(packableItem.serialise(), resolve)
      this.cliView.displayMessage('Sending file complete', { skipPrompt: false })
    })
  }
}

export default ContactClient
